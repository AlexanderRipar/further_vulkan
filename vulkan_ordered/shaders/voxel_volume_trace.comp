#version 450
#extension GL_ARB_separate_shader_objects : enable





layout (local_size_x_id = 1) in;
layout (local_size_y_id = 2) in;
layout (local_size_x = 8, local_size_y = 8) in;

layout (constant_id = 3) const uint BASE_DIM_LOG2 = 6;
layout (constant_id = 4) const uint BRICK_DIM_LOG2 = 3;
layout (constant_id = 5) const uint LEVEL_CNT = 1;

layout (set = 0, binding = 0, rgba8) uniform writeonly image2D hit_ids;

layout (set = 0, binding = 1, r32f) uniform writeonly image2D hit_times;

layout (set = 0, binding = 2, r16ui) uniform readonly uimage3D base_data;

layout (set = 0, binding = 3) readonly buffer Bricks {
	uint elems[];
} bricks;

layout (set = 0, binding = 4) readonly buffer Leaves {
	uint elems[];
} leaves;

layout(push_constant) uniform Push_data {
	vec3 origin;
	vec2 direction_delta;
	mat3 direction_rotation;
} push_data;



vec3 calculate_direction(in vec2 invocation, in vec2 render_extent)
{
	vec2 invocation_centered = vec2(invocation) - render_extent * 0.5 + 0.5;

	vec3 base_direction = vec3(push_data.direction_delta * invocation_centered, -1.0);

	vec3 normalized_direction = normalize(base_direction);

	return normalized_direction * push_data.direction_rotation;
}



void main()
{
	const int RAY_ACCURACY = 1 << 11;

	// Check if we are inside the image

	ivec2 invocation = ivec2(gl_GlobalInvocationID.xy);

	ivec2 render_extent = imageSize(hit_ids);

	if (invocation.x > render_extent.x || invocation.y > render_extent.y)
		return;

	

	vec3 ray_direction_inv = 1.0 / calculate_direction(invocation, render_extent);
	


	ivec3 ray_pos = ivec3(floor(push_data.origin)) + ivec3(1 << (BASE_DIM_LOG2 - 1));

	ivec3 ray_coefficient = ivec3(ray_direction_inv * float(RAY_ACCURACY));



	ivec3 ray_offset = ivec3(((vec3(greaterThanEqual(ray_coefficient, vec3(0.0))) - push_data.origin - float(1 << (BASE_DIM_LOG2 - 1))) * float(RAY_ACCURACY))* ray_direction_inv);



	ivec3 ray_time;

	int min_time = -1;



	uint loopcnt = 0;

	while (max(max(uint(ray_pos.x), uint(ray_pos.y)), uint(ray_pos.z)) < 1 << BASE_DIM_LOG2)
	{
		uint base_value = imageLoad(base_data, ray_pos).x;

		if(base_value != 0xFFFF)
		{
				vec3 last_step;

				if (min_time == -1.0)
					last_step = vec3(0.6, 0.25, 0.1);
				else if (min_time == ray_time.x)
					last_step = vec3(0.5, 0.125, 0.125);
				else if (min_time == ray_time.y)
					last_step = vec3(0.125, 0.5, 0.125);
				else
					last_step = vec3(0.125, 0.125, 0.5);

				float level_factor = 1.0; // - (base_offset.x - BASE_DIM_HALF) * (1.0 / float(LEVEL_CNT << BASE_DIM_LOG2));

				imageStore(hit_ids, invocation, vec4(last_step * level_factor, 1.0));

				imageStore(hit_times, invocation, vec4(min_time));

				return;
		}

		if (loopcnt == 1024)
		{
			imageStore(hit_ids, invocation, vec4(1.0));

			imageStore(hit_times, invocation, vec4(intBitsToFloat(0x7F800000)));

			return;
		}

		++loopcnt;

		ray_time = ray_coefficient * ray_pos + ray_offset;

		min_time = min(min(ray_time.x, ray_time.y), ray_time.z);

		if (min_time == ray_time.x)
			ray_pos.x += ray_coefficient.x < 0 ? -1 : 1;
		else if (min_time == ray_time.y)
			ray_pos.y += ray_coefficient.y < 0 ? -1 : 1;
		else
			ray_pos.z += ray_coefficient.z < 0 ? -1 : 1;
	}

	imageStore(hit_ids, invocation, vec4(0.0, 0.1, 0.2, 1.0));

	imageStore(hit_times, invocation, vec4(intBitsToFloat(0x7F800000)));

	return;










	/*
	// Get ray parameters
	
	vec3 ray_index = floor(push_data.origin);
	
	vec3 ray_coefficient = 1.0 / calculate_direction(invocation, render_extent);
	
	vec3 ray_offset = (vec3(greaterThanEqual(ray_coefficient, vec3(0.0))) - push_data.origin) * ray_coefficient;
	


	vec3 base_offset = vec3(BASE_DIM_HALF);



	vec3 ray_time;

	float min_time = -1.0;



	// Start a-looping

	while (base_offset.x < BASE_DIM * float(LEVEL_CNT))
	{
		while (max(max(ray_index.x, ray_index.y), ray_index.z) < float(1 << (BASE_DIM_LOG2 - 1)) && min(min(ray_index.x, ray_index.y), ray_index.z) >= -BASE_DIM_HALF)
		{
			uint base_value = imageLoad(base_data, ivec3(ray_index + base_offset)).x;

			if (base_value != 0xFFFF)
				return;
			
			ray_time = ray_coefficient * ray_index + ray_offset;

			min_time = min(min(ray_time.x, ray_time.y), ray_time.z);

			if (min_time == ray_time.x)
				ray_index.x += ray_coefficient.x < 0.0 ? -1.0 : 1.0;
			else if (min_time == ray_time.y)
				ray_index.y += ray_coefficient.y < 0.0 ? -1.0 : 1.0;
			else
				ray_index.z += ray_coefficient.z < 0.0 ? -1.0 : 1.0;
		}

		ray_index = floor(ray_index * 0.5);

		base_offset.x += BASE_DIM;

		ray_offset = (ray_offset + vec3(greaterThanEqual(ray_coefficient, vec3(0.0))) * ray_coefficient) * 0.5;
	}
	*/
}
